// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /*
        i   x  x  a   c  c  c  c  c  c   d  d  d   j  j  j
        15  14 13 12  11 10 9  8  7  6   5  4  3   2  1  0      instruction index (reverse order)
                  a1  c1 c2 c3 c4 c5 c6  d1 d2 d3  j1 j2 j3     c/d/j index

        In case of an A-instruction, the entire instruction represent the 16-bit
        value of the constant that should be loaded into the A register.

        In case of a C-instruction, the a- and c-bits code the comp part of the
        instruction, while the d- and j-bits code the dest and jump parts of the
        instruction, respectively (the x-bits are not used, and can be ignored).

        a = instruction[15]
        c = instruction[6:12]   // decides what ALU function
        d = instruction[3:6]    // dest - which register should accept output
        j = instruction[0:3]    // jump
    */

    
    Not(in=instruction[15], out=isainstruction);                    // if opcode = 0, A instruction
    Not(in=isainstruction, out=iscinstruction);                     // if opcode = 1, C instruction
    Mux16(a=aluout1, b=instruction, sel=isainstruction, out=ain);   // Choose between ALU and Instruction for input to A register

    // Assert written to M if C instruction AND d3 (instruction[3])
    And(a=iscinstruction, b=instruction[3], out=writeM);

    // A Register (Address register, can also be used as a Data register)
    Or(a=isainstruction, b=instruction[5], out=loada);                                       
    ARegister(in=ain, load=loada,                                   // Load only if A instruction OR dest set to specified location  
        out=aout1, out=aout2, out[0..14]=addressM);                 // Also write output to memory

    /* Use the A register as a data register...
     * Choose inM if instruction reads from M
     * Else use A register (an A or D expression)
     * This is determined by the `a` bit (instruction[12] or a1)
     */
    Mux16(a=aout1, b=inM, sel=instruction[12], out=aluy);           // Choose between A register or inM for ALU input based upon a1

    // D Register (Data register)
    And(a=iscinstruction, b=instruction[4], out=loadd);             // Load register if C instruction and D as destination (instruction[4] or d2)
    DRegister(in=aluout2, load=loadd, out=dout);

    // ALU
    // Always comparing D register with either prev ALU output, Instruction or M
    // c's come from instruction as-is
    ALU(x=dout, y=aluy, 
        zx=instruction[11],     // zero the x input? 
        nx=instruction[10],     // negate the x input?
        zy=instruction[9],      // zero the y input?
        ny=instruction[8],      // negate the y input?
        f=instruction[7],       // compute out = x + y (if 1) or x & y (if 0)
        no=instruction[6],      // negate the out output?
        out=aluout1, out=aluout2, out=outM,
        zr=zrout, ng=ngout);

    // Program Counter
    // Load = 1 if jump, causes register to contain A and thus PC to use it

    // zrout if zero
    // ngout if negative

    // instruction[0] - out > 0
    // instruction[1] - out = 0
    // instruction[2] - out < 0

    // ALU tells us if we have a zero or negative so these are trivial to compute jump condition
    And(a=zrout, b=instruction[1], out=jeq);    // is zero and jump if zero
    And(a=ngout, b=instruction[2], out=jlt);    // is neg and jump if neg

    // We derive positive from the above. If it's neither then must be positive!
    // From there we can compute jump condition for positive cases
    Or(a=zrout, b=ngout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
    And(a=positive, b=instruction[0], out=jgt); // is positive and jump if positive

    // If any of the above are true then jump (3-way OR)
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jump);                 // jump if all conditions met

    // Now feed into Program Counter
    And(a=iscinstruction, b=jump, out=load);    // Only jump if C instruction
    Not(in=load, out=inc);                      // Inc if there is no jump or reset
    PC(in=aout2, load=load, inc=inc, reset=reset, out[0..14]=pc);
}